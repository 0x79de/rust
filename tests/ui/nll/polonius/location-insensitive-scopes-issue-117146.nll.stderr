error[E0373]: closure may outlive the current function, but it borrows `a`, which is owned by the current function
  --> $DIR/location-insensitive-scopes-issue-117146.rs:10:13
   |
LL |     let b = |_| &a;
   |             ^^^  - `a` is borrowed here
   |             |
   |             may outlive borrowed value `a`
   |
note: function requires argument type to outlive `'static`
  --> $DIR/location-insensitive-scopes-issue-117146.rs:13:5
   |
LL |     bad(&b);
   |     ^^^^^^^
help: to force the closure to take ownership of `a` (and any other referenced variables), use the `move` keyword
   |
LL |     let b = move |_| &a;
   |             ++++

error: implementation of `Fn` is not general enough
  --> $DIR/location-insensitive-scopes-issue-117146.rs:13:5
   |
LL |     bad(&b);
   |     ^^^^^^^ implementation of `Fn` is not general enough
   |
   = note: closure with signature `fn(&'2 ()) -> &()` must implement `Fn<(&'1 (),)>`, for any lifetime `'1`...
   = note: ...but it actually implements `Fn<(&'2 (),)>`, for some specific lifetime `'2`

error: implementation of `FnOnce` is not general enough
  --> $DIR/location-insensitive-scopes-issue-117146.rs:13:5
   |
LL |     bad(&b);
   |     ^^^^^^^ implementation of `FnOnce` is not general enough
   |
   = note: closure with signature `fn(&'2 ()) -> &()` must implement `FnOnce<(&'1 (),)>`, for any lifetime `'1`...
   = note: ...but it actually implements `FnOnce<(&'2 (),)>`, for some specific lifetime `'2`

error: aborting due to 3 previous errors

For more information about this error, try `rustc --explain E0373`.
