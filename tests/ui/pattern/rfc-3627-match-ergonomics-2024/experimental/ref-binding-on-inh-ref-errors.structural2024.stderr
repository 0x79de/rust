error: binding modifiers may only be written when the default binding mode is `move`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:15:11
   |
LL |     let [&ref x] = &[&0];
   |           ^^^ binding modifier not allowed under `ref` default binding mode
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
note: the default binding mode changed to `ref` because this has type `&_`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:15:9
   |
LL |     let [&ref x] = &[&0];
   |         ^^^^^^^^ the default binding mode is `ref`, introduced here
help: make the implied reference pattern explicit
   |
LL |     let &[&ref x] = &[&0];
   |         +

error: binding modifiers may only be written when the default binding mode is `move`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:20:11
   |
LL |     let [&ref x] = &mut [&0];
   |           ^^^ binding modifier not allowed under `ref` default binding mode
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
note: the default binding mode changed to `ref mut` because this has type `&mut _`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:20:9
   |
LL |     let [&ref x] = &mut [&0];
   |         ^^^^^^^^ the default binding mode is `ref mut`, introduced here
help: make the implied reference pattern explicit
   |
LL |     let &mut [&ref x] = &mut [&0];
   |         ++++

error: binding modifiers may only be written when the default binding mode is `move`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:25:15
   |
LL |     let [&mut ref x] = &mut [&mut 0];
   |               ^^^ binding modifier not allowed under `ref mut` default binding mode
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
note: the default binding mode changed to `ref mut` because this has type `&mut _`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:25:9
   |
LL |     let [&mut ref x] = &mut [&mut 0];
   |         ^^^^^^^^^^^^ the default binding mode is `ref mut`, introduced here
help: make the implied reference pattern explicit
   |
LL |     let &mut [&mut ref x] = &mut [&mut 0];
   |         ++++

error: binding modifiers may only be written when the default binding mode is `move`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:30:15
   |
LL |     let [&mut ref mut x] = &mut [&mut 0];
   |               ^^^^^^^ binding modifier not allowed under `ref mut` default binding mode
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
note: the default binding mode changed to `ref mut` because this has type `&mut _`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:30:9
   |
LL |     let [&mut ref mut x] = &mut [&mut 0];
   |         ^^^^^^^^^^^^^^^^ the default binding mode is `ref mut`, introduced here
help: make the implied reference pattern explicit
   |
LL |     let &mut [&mut ref mut x] = &mut [&mut 0];
   |         ++++

error: binding modifiers may only be written when the default binding mode is `move`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:39:11
   |
LL |     let [&ref x] = &[&mut 0];
   |           ^^^ binding modifier not allowed under `ref` default binding mode
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
note: the default binding mode changed to `ref` because this has type `&_`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:39:9
   |
LL |     let [&ref x] = &[&mut 0];
   |         ^^^^^^^^ the default binding mode is `ref`, introduced here
help: make the implied reference pattern explicit
   |
LL |     let &[&ref x] = &[&mut 0];
   |         +

error: binding modifiers may only be written when the default binding mode is `move`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:45:11
   |
LL |     let [&ref x] = &mut [&mut 0];
   |           ^^^ binding modifier not allowed under `ref` default binding mode
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
note: the default binding mode changed to `ref mut` because this has type `&mut _`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:45:9
   |
LL |     let [&ref x] = &mut [&mut 0];
   |         ^^^^^^^^ the default binding mode is `ref mut`, introduced here
help: make the implied reference pattern explicit
   |
LL |     let &mut [&ref x] = &mut [&mut 0];
   |         ++++

error: binding modifiers may only be written when the default binding mode is `move`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:54:15
   |
LL |     let [&mut ref x] = &[&mut 0];
   |               ^^^ binding modifier not allowed under `ref` default binding mode
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
note: the default binding mode changed to `ref` because this has type `&_`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:54:9
   |
LL |     let [&mut ref x] = &[&mut 0];
   |         ^^^^^^^^^^^^ the default binding mode is `ref`, introduced here
help: make the implied reference pattern explicit
   |
LL |     let &[&mut ref x] = &[&mut 0];
   |         +

error: binding modifiers may only be written when the default binding mode is `move`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:67:10
   |
LL |     let [ref mut x] = &[0];
   |          ^^^^^^^ binding modifier not allowed under `ref` default binding mode
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
note: the default binding mode changed to `ref` because this has type `&_`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:67:9
   |
LL |     let [ref mut x] = &[0];
   |         ^^^^^^^^^^^ the default binding mode is `ref`, introduced here
help: make the implied reference pattern explicit
   |
LL |     let &[ref mut x] = &[0];
   |         +

error[E0596]: cannot borrow data in a `&` reference as mutable
  --> $DIR/ref-binding-on-inh-ref-errors.rs:67:10
   |
LL |     let [ref mut x] = &[0];
   |          ^^^^^^^^^ cannot borrow as mutable

error: binding modifiers may only be written when the default binding mode is `move`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:75:10
   |
LL |     let [ref x] = &[0];
   |          ^^^ binding modifier not allowed under `ref` default binding mode
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
note: the default binding mode changed to `ref` because this has type `&_`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:75:9
   |
LL |     let [ref x] = &[0];
   |         ^^^^^^^ the default binding mode is `ref`, introduced here
help: make the implied reference pattern explicit
   |
LL |     let &[ref x] = &[0];
   |         +

error: binding modifiers may only be written when the default binding mode is `move`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:79:10
   |
LL |     let [ref x] = &mut [0];
   |          ^^^ binding modifier not allowed under `ref mut` default binding mode
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
note: the default binding mode changed to `ref mut` because this has type `&mut _`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:79:9
   |
LL |     let [ref x] = &mut [0];
   |         ^^^^^^^ the default binding mode is `ref mut`, introduced here
help: make the implied reference pattern explicit
   |
LL |     let &mut [ref x] = &mut [0];
   |         ++++

error: binding modifiers may only be written when the default binding mode is `move`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:83:10
   |
LL |     let [ref mut x] = &mut [0];
   |          ^^^^^^^ binding modifier not allowed under `ref mut` default binding mode
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/match-ergonomics.html>
note: the default binding mode changed to `ref mut` because this has type `&mut _`
  --> $DIR/ref-binding-on-inh-ref-errors.rs:83:9
   |
LL |     let [ref mut x] = &mut [0];
   |         ^^^^^^^^^^^ the default binding mode is `ref mut`, introduced here
help: make the implied reference pattern explicit
   |
LL |     let &mut [ref mut x] = &mut [0];
   |         ++++

error: aborting due to 12 previous errors

For more information about this error, try `rustc --explain E0596`.
