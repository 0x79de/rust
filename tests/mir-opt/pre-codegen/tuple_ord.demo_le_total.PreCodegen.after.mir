// MIR for `demo_le_total` after PreCodegen

fn demo_le_total(_1: &(u16, i16), _2: &(u16, i16)) -> bool {
    debug a => _1;
    debug b => _2;
    let mut _0: bool;
    scope 1 (inlined std::cmp::impls::<impl PartialOrd for &(u16, i16)>::le) {
        scope 2 (inlined core::tuple::<impl PartialOrd for (u16, i16)>::le) {
            let mut _12: bool;
            let _13: &i16;
            let _14: &i16;
            scope 3 {
                let mut _6: &std::option::Option<std::cmp::Ordering>;
                let mut _8: &std::option::Option<std::cmp::Ordering>;
                scope 4 (inlined <Option<std::cmp::Ordering> as PartialEq>::ne) {
                    let mut _11: bool;
                    scope 5 (inlined <Option<std::cmp::Ordering> as PartialEq>::eq) {
                        let mut _7: isize;
                        scope 6 {
                            scope 7 (inlined <std::cmp::Ordering as PartialEq>::eq) {
                                let _9: i8;
                                scope 8 {
                                    let _10: i8;
                                    scope 9 {
                                    }
                                }
                            }
                        }
                    }
                }
                scope 10 (inlined <Option<std::cmp::Ordering> as PartialEq>::eq) {
                    let mut _15: isize;
                    scope 11 {
                        scope 12 (inlined <std::cmp::Ordering as PartialEq>::eq) {
                            let _16: i8;
                            scope 13 {
                                let _17: i8;
                                scope 14 {
                                }
                            }
                        }
                    }
                }
            }
            scope 15 (inlined std::cmp::impls::<impl PartialOrd for u16>::partial_cmp) {
                let mut _3: u16;
                let mut _4: u16;
                let mut _5: std::cmp::Ordering;
            }
        }
    }

    bb0: {
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_8);
        StorageLive(_6);
        StorageLive(_3);
        _3 = copy ((*_1).0: u16);
        StorageLive(_4);
        _4 = copy ((*_2).0: u16);
        _5 = Cmp(move _3, move _4);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_12);
        _6 = const core::tuple::<impl std::cmp::PartialOrd for (u16, i16)>::le::promoted[1];
        StorageLive(_11);
        StorageLive(_7);
        _7 = discriminant((*_6));
        switchInt(move _7) -> [0: bb1, 1: bb2, otherwise: bb10];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_11);
        _8 = const core::tuple::<impl std::cmp::PartialOrd for (u16, i16)>::le::promoted[0];
        StorageLive(_15);
        goto -> bb5;
    }

    bb2: {
        StorageLive(_9);
        StorageLive(_10);
        _9 = discriminant(_5);
        _10 = discriminant((((*_6) as Some).0: std::cmp::Ordering));
        _11 = Eq(copy _9, copy _10);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        _12 = Not(move _11);
        StorageDead(_11);
        switchInt(move _12) -> [0: bb3, otherwise: bb4];
    }

    bb3: {
        _13 = &((*_1).1: i16);
        _14 = &((*_2).1: i16);
        _0 = <i16 as PartialOrd>::le(move _13, move _14) -> [return: bb9, unwind continue];
    }

    bb4: {
        _8 = const core::tuple::<impl std::cmp::PartialOrd for (u16, i16)>::le::promoted[0];
        StorageLive(_15);
        goto -> bb5;
    }

    bb5: {
        _15 = discriminant((*_8));
        switchInt(move _15) -> [0: bb6, 1: bb7, otherwise: bb10];
    }

    bb6: {
        _0 = const false;
        goto -> bb8;
    }

    bb7: {
        StorageLive(_16);
        StorageLive(_17);
        _16 = discriminant(_5);
        _17 = discriminant((((*_8) as Some).0: std::cmp::Ordering));
        _0 = Eq(copy _16, copy _17);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb8;
    }

    bb8: {
        StorageDead(_15);
        goto -> bb9;
    }

    bb9: {
        StorageDead(_12);
        StorageDead(_6);
        StorageDead(_8);
        StorageDead(_14);
        StorageDead(_13);
        return;
    }

    bb10: {
        unreachable;
    }
}
