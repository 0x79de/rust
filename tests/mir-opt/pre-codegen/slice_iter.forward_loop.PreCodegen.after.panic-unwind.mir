// MIR for `forward_loop` after PreCodegen

fn forward_loop(_1: &[T], _2: impl Fn(&T)) -> () {
    debug slice => _1;
    debug f => _2;
    let mut _0: ();
    let mut _11: std::ptr::NonNull<T>;
    let mut _12: *const T;
    let mut _24: std::option::Option<&T>;
    let mut _25: isize;
    let mut _27: &impl Fn(&T);
    let mut _28: (&T,);
    let _29: ();
    scope 1 {
        debug ((iter: std::slice::Iter<'_, T>).0: std::ptr::NonNull<T>) => _11;
        debug ((iter: std::slice::Iter<'_, T>).1: *const T) => _12;
        debug ((iter: std::slice::Iter<'_, T>).2: std::marker::PhantomData<&T>) => const ZeroSized: PhantomData<&T>;
        let _26: &T;
        scope 2 {
            debug x => _26;
        }
        scope 17 (inlined <std::slice::Iter<'_, T> as Iterator>::next) {
            let _13: std::ptr::NonNull<T>;
            let _15: std::ptr::NonNull<T>;
            let mut _18: bool;
            let mut _21: std::ptr::NonNull<T>;
            let mut _23: usize;
            scope 18 {
                let _14: *const T;
                scope 19 {
                    let _22: usize;
                    scope 20 {
                        scope 23 (inlined core::num::<impl usize>::unchecked_sub) {
                            scope 24 (inlined core::ub_checks::check_language_ub) {
                                scope 25 (inlined core::ub_checks::check_language_ub::runtime) {
                                }
                            }
                        }
                        scope 26 (inlined without_provenance_mut::<T>) {
                        }
                    }
                    scope 21 (inlined std::ptr::const_ptr::<impl *const T>::addr) {
                        scope 22 (inlined std::ptr::const_ptr::<impl *const T>::cast::<()>) {
                        }
                    }
                    scope 27 (inlined <NonNull<T> as PartialEq>::eq) {
                        let mut _16: *mut T;
                        let mut _17: *mut T;
                        scope 28 (inlined NonNull::<T>::as_ptr) {
                        }
                        scope 29 (inlined NonNull::<T>::as_ptr) {
                        }
                    }
                    scope 30 (inlined NonNull::<T>::add) {
                        let mut _19: *const T;
                        let mut _20: *const T;
                        scope 31 (inlined NonNull::<T>::as_ptr) {
                        }
                    }
                }
            }
        }
    }
    scope 3 (inlined core::slice::<impl [T]>::iter) {
        scope 4 (inlined std::slice::Iter::<'_, T>::new) {
            let _3: usize;
            let mut _7: *mut T;
            let mut _8: *mut T;
            let mut _10: *const T;
            scope 5 {
                let _6: std::ptr::NonNull<T>;
                scope 6 {
                    let _9: *const T;
                    scope 7 {
                    }
                    scope 12 (inlined std::ptr::without_provenance::<T>) {
                        scope 13 (inlined without_provenance_mut::<T>) {
                        }
                    }
                    scope 14 (inlined NonNull::<T>::as_ptr) {
                    }
                    scope 15 (inlined std::ptr::mut_ptr::<impl *mut T>::add) {
                    }
                }
                scope 8 (inlined <NonNull<[T]> as From<&[T]>>::from) {
                    scope 9 (inlined NonNull::<[T]>::from_ref) {
                        let mut _4: *const [T];
                    }
                }
                scope 10 (inlined NonNull::<[T]>::cast::<T>) {
                    let mut _5: *const T;
                    scope 11 (inlined NonNull::<[T]>::as_ptr) {
                    }
                }
            }
        }
    }
    scope 16 (inlined <std::slice::Iter<'_, T> as IntoIterator>::into_iter) {
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _3 = PtrMetadata(copy _1);
        _4 = &raw const (*_1);
        StorageLive(_5);
        _5 = copy _4 as *const T (PtrToPtr);
        _6 = NonNull::<T> { pointer: move _5 };
        StorageDead(_5);
        StorageLive(_9);
        switchInt(const <T as std::mem::SizedTypeProperties>::IS_ZST) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_8);
        StorageLive(_7);
        _7 = copy _4 as *mut T (PtrToPtr);
        _8 = Offset(copy _7, copy _3);
        StorageDead(_7);
        _9 = move _8 as *const T (PtrToPtr);
        StorageDead(_8);
        goto -> bb3;
    }

    bb2: {
        _9 = copy _3 as *const T (Transmute);
        goto -> bb3;
    }

    bb3: {
        _10 = copy _9;
        StorageDead(_9);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_11);
        StorageLive(_12);
        _11 = copy _6;
        _12 = copy _10;
        goto -> bb4;
    }

    bb4: {
        StorageLive(_24);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_15);
        _13 = copy _11;
        _14 = copy _12;
        switchInt(const <T as std::mem::SizedTypeProperties>::IS_ZST) -> [0: bb5, otherwise: bb8];
    }

    bb5: {
        StorageLive(_18);
        _15 = copy _14 as std::ptr::NonNull<T> (Transmute);
        StorageLive(_16);
        _16 = copy _13 as *mut T (Transmute);
        StorageLive(_17);
        _17 = copy _15 as *mut T (Transmute);
        _18 = Eq(move _16, move _17);
        StorageDead(_17);
        StorageDead(_16);
        switchInt(move _18) -> [0: bb6, otherwise: bb7];
    }

    bb6: {
        StorageDead(_18);
        StorageLive(_21);
        StorageLive(_20);
        StorageLive(_19);
        _19 = copy _13 as *const T (Transmute);
        _20 = Offset(move _19, const 1_usize);
        StorageDead(_19);
        _21 = NonNull::<T> { pointer: move _20 };
        StorageDead(_20);
        _11 = move _21;
        StorageDead(_21);
        goto -> bb11;
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb12;
    }

    bb8: {
        _22 = copy _14 as usize (Transmute);
        switchInt(copy _22) -> [0: bb9, otherwise: bb10];
    }

    bb9: {
        StorageDead(_15);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb12;
    }

    bb10: {
        _23 = SubUnchecked(copy _22, const 1_usize);
        _12 = copy _23 as *const T (Transmute);
        goto -> bb11;
    }

    bb11: {
        _24 = copy _13 as std::option::Option<&T> (Transmute);
        StorageDead(_15);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_14);
        StorageDead(_13);
        _25 = discriminant(_24);
        switchInt(move _25) -> [0: bb12, 1: bb14, otherwise: bb18];
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_11);
        StorageDead(_12);
        drop(_2) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }

    bb14: {
        _26 = copy ((_24 as Some).0: &T);
        StorageLive(_27);
        _27 = &_2;
        StorageLive(_28);
        _28 = (copy _26,);
        _29 = <impl Fn(&T) as Fn<(&T,)>>::call(move _27, move _28) -> [return: bb15, unwind: bb16];
    }

    bb15: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_24);
        goto -> bb4;
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        resume;
    }

    bb18: {
        unreachable;
    }
}
